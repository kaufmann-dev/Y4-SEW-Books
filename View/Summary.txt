### ARepository ###
using System.Linq.Expressions;
using Domain.Repositories.Interfaces;
using Microsoft.EntityFrameworkCore;
using Model.Configurations;

namespace Domain.Repositories.Implementations; 

public abstract class ARepository<TEntity> : IRepository<TEntity> where TEntity : class {
    protected TestDbContext _dbContext;
    protected DbSet<TEntity> _table;

    public ARepository(TestDbContext dbContext) {
        _dbContext = dbContext;
        _table = _dbContext.Set<TEntity>();
    }

    public async Task CreateAsync(TEntity entity) {
        _table.Add(entity);
        await _dbContext.SaveChangesAsync();
    }

    public async Task UpdateAsync(TEntity entity) {
        _table.Update(entity);
        await _dbContext.SaveChangesAsync();
    }

    public async Task DeleteAsync(TEntity entity) {
        _table.Remove(entity);
        await _dbContext.SaveChangesAsync();
    }

    public async Task<TEntity?> ReadAsync(int id)
        => await _table.FindAsync(id);

    public async Task<List<TEntity>> ReadAsync(Expression<Func<TEntity, bool>> filter)
        => await _table.Where(filter).ToListAsync();

    public async Task<List<TEntity>> ReadAllAsync(int start, int count)
        => await _table.Skip(start).Take(count).ToListAsync();
}

### BookRepository ###
using System.Linq.Expressions;
using Domain.Repositories.Interfaces;
using Microsoft.EntityFrameworkCore;
using Model.Configurations;
using Model.Entities;

namespace Domain.Repositories.Implementations; 

public class BookRepository : ARepository<Book>, IBookRepository {
    
    public BookRepository(TestDbContext dbContext) : base(dbContext) {
        
    }
    public async Task<List<Book>> ReadGraphAsync(Expression<Func<Book, bool>> filter)
        => await _table
            .Include(t => t.BookAuthorList)
            .ThenInclude(m => m.Author)
            .Where(filter)
            .ToListAsync();
}

### IRepository ###
using System.Linq.Expressions;

namespace Domain.Repositories.Interfaces; 

public interface IRepository<TEntity> where TEntity : class {

    Task CreateAsync(TEntity entity);

    Task UpdateAsync(TEntity entity);

    Task DeleteAsync(TEntity entity);

    Task<TEntity?> ReadAsync(int id);

    Task<List<TEntity>> ReadAsync(Expression<Func<TEntity, bool>> filter);

    Task<List<TEntity>> ReadAllAsync(int start, int count);

}

### IBookRepository ###
using System.Linq.Expressions;
using Model.Entities;

namespace Domain.Repositories.Interfaces; 

public interface IBookRepository : IRepository<Book> {
    Task<List<Book>> ReadGraphAsync(Expression<Func<Book, bool>> filter);

}

### DbContext ###
using Microsoft.EntityFrameworkCore;
using Model.Entities;

namespace Model.Configurations; 

public class TestDbContext : DbContext {

    public DbSet<Book> Books { get; set; }
    public DbSet<Author> Authors { get; set; }
    public DbSet<BookAuthor> BookAuthors { get; set; }


    public TestDbContext(DbContextOptions<TestDbContext> options) : base(options) {
        
    }

    protected override void OnModelCreating(ModelBuilder builder) {
        builder.Entity<Book>()
            .HasIndex(b => b.Title)
            .IsUnique();
        
        builder.Entity<Book>()
            .Property(b=>b.BookType)
            .HasConversion<string>();

        builder.Entity<BookAuthor>().HasKey(m => new {
            m.AuthorId,
            m.BookId
        });

        builder.Entity<BookAuthor>()
            .HasOne(m => m.Book)
            .WithMany()
            .HasForeignKey(m => m.BookId);

        builder.Entity<BookAuthor>()
            .HasOne(m => m.Author)
            .WithMany()
            .HasForeignKey(m => m.AuthorId);
        
        builder.Entity<BookAuthor>()
            .HasOne(m => m.Book)
            .WithMany(a => a.BookAuthorList)
            .HasForeignKey(m => m.BookId);

        builder.Entity<Author>()
            .HasDiscriminator<string>("GENDER")
            .HasValue<WomanAuthor>("FEMALE")
            .HasValue<MaleAuthor>("MALE");
    }
}

### Program.cs ###
builder.Services.AddDbContextFactory<TestDbContext>(
    options => options.UseMySql(
        builder.Configuration.GetConnectionString("DefaultConnection"), 
        new MySqlServerVersion(new Version(8,0,26))
    )
);
builder.Services.AddScoped<IBookRepository, BookRepository>();

### Migrate ###
cd Model
dotnet ef -s ../View migrations add mig1
dotnet ef -s ../View database update
